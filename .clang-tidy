---
# Universal Numbers Library - clang-tidy configuration
# Static analysis and modernization for C++20 numerical computing library

# Inheritance model: start with defaults and selectively enable/disable
InheritParentConfig: false

# Header filter: analyze all Universal headers
HeaderFilterRegex: 'include/sw/universal/.*\.hpp$'

# Enable checks - conservative start focused on bugs, performance, and readability
Checks: >
  -*,
  bugprone-*,
  -bugprone-easily-swappable-parameters,
  -bugprone-exception-escape,
  -bugprone-narrowing-conversions,
  -bugprone-signed-char-misuse,
  cert-dcl21-cpp,
  cert-dcl50-cpp,
  cert-dcl58-cpp,
  cert-env33-c,
  cert-err34-c,
  cert-err52-cpp,
  cert-err58-cpp,
  cert-err60-cpp,
  cert-flp30-c,
  cert-msc50-cpp,
  cert-msc51-cpp,
  cert-oop58-cpp,
  clang-analyzer-*,
  -clang-analyzer-cplusplus.NewDeleteLeaks,
  cppcoreguidelines-avoid-goto,
  cppcoreguidelines-init-variables,
  cppcoreguidelines-interfaces-global-init,
  cppcoreguidelines-narrowing-conversions,
  cppcoreguidelines-no-malloc,
  cppcoreguidelines-pro-type-cstyle-cast,
  cppcoreguidelines-pro-type-member-init,
  cppcoreguidelines-slicing,
  cppcoreguidelines-special-member-functions,
  misc-definitions-in-headers,
  misc-misplaced-const,
  misc-new-delete-overloads,
  misc-non-copyable-objects,
  misc-static-assert,
  misc-throw-by-value-catch-by-reference,
  misc-unconventional-assign-operator,
  misc-uniqueptr-reset-release,
  misc-unused-*,
  modernize-avoid-bind,
  modernize-deprecated-headers,
  modernize-deprecated-ios-base-aliases,
  modernize-loop-convert,
  modernize-make-shared,
  modernize-make-unique,
  modernize-pass-by-value,
  modernize-raw-string-literal,
  modernize-redundant-void-arg,
  modernize-replace-auto-ptr,
  modernize-replace-random-shuffle,
  modernize-return-braced-init-list,
  modernize-shrink-to-fit,
  modernize-unary-static-assert,
  modernize-use-auto,
  modernize-use-bool-literals,
  modernize-use-default-member-init,
  modernize-use-emplace,
  modernize-use-equals-default,
  modernize-use-equals-delete,
  modernize-use-noexcept,
  modernize-use-nullptr,
  modernize-use-override,
  modernize-use-transparent-functors,
  modernize-use-using,
  performance-*,
  -performance-avoid-endl,
  -performance-inefficient-string-concatenation,
  -performance-no-int-to-ptr,
  readability-avoid-const-params-in-decls,
  readability-const-return-type,
  readability-container-size-empty,
  readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-deleted-default,
  readability-inconsistent-declaration-parameter-name,
  readability-make-member-function-const,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-non-const-parameter,
  readability-redundant-*,
  readability-simplify-*,
  readability-static-*,
  readability-string-compare,
  readability-uniqueptr-delete-release

# Check options - customize behavior of specific checks
CheckOptions:
  # Readability
  - key:             readability-identifier-naming.NamespaceCase
    value:           lower_case
  - key:             readability-identifier-naming.ClassCase
    value:           lower_case
  - key:             readability-identifier-naming.StructCase
    value:           lower_case
  - key:             readability-identifier-naming.TemplateParameterCase
    value:           CamelCase
  - key:             readability-identifier-naming.FunctionCase
    value:           lower_case
  - key:             readability-identifier-naming.VariableCase
    value:           lower_case
  - key:             readability-identifier-naming.PrivateMemberSuffix
    value:           ''
  - key:             readability-identifier-naming.ProtectedMemberSuffix
    value:           ''
  - key:             readability-identifier-naming.MacroDefinitionCase
    value:           UPPER_CASE
  - key:             readability-identifier-naming.EnumConstantCase
    value:           UPPER_CASE
  - key:             readability-identifier-naming.ConstexprVariableCase
    value:           lower_case
  - key:             readability-identifier-naming.GlobalConstantCase
    value:           lower_case
  - key:             readability-identifier-naming.MemberConstantCase
    value:           lower_case
  - key:             readability-identifier-naming.StaticConstantCase
    value:           lower_case

  # Modernize
  - key:             modernize-loop-convert.MaxCopySize
    value:           '16'
  - key:             modernize-loop-convert.MinConfidence
    value:           reasonable
  - key:             modernize-loop-convert.NamingStyle
    value:           lower_case
  - key:             modernize-pass-by-value.IncludeStyle
    value:           llvm
  - key:             modernize-replace-auto-ptr.IncludeStyle
    value:           llvm
  - key:             modernize-use-nullptr.NullMacros
    value:           'NULL'
  - key:             modernize-use-auto.MinTypeNameLength
    value:           '8'
  - key:             modernize-use-auto.RemoveStars
    value:           'false'

  # Performance
  - key:             performance-for-range-copy.WarnOnAllAutoCopies
    value:           'false'
  - key:             performance-inefficient-vector-operation.EnableProto
    value:           'false'
  - key:             performance-move-const-arg.CheckTriviallyCopyableMove
    value:           'true'
  - key:             performance-move-constructor-init.IncludeStyle
    value:           llvm
  - key:             performance-type-promotion-in-math-fn.IncludeStyle
    value:           llvm
  - key:             performance-unnecessary-copy-initialization.AllowedTypes
    value:           ''
  - key:             performance-unnecessary-value-param.AllowedTypes
    value:           ''
  - key:             performance-unnecessary-value-param.IncludeStyle
    value:           llvm

  # Bugprone
  - key:             bugprone-argument-comment.StrictMode
    value:           '0'
  - key:             bugprone-assert-side-effect.AssertMacros
    value:           assert
  - key:             bugprone-dangling-handle.HandleClasses
    value:           'std::basic_string_view;std::experimental::basic_string_view'
  - key:             bugprone-string-constructor.WarnOnLargeLength
    value:           '8388608'
  - key:             bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression
    value:           'true'
  - key:             bugprone-suspicious-string-compare.WarnOnImplicitComparison
    value:           'true'
  - key:             bugprone-suspicious-string-compare.WarnOnLogicalNotComparison
    value:           'true'

  # C++ Core Guidelines
  - key:             cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors
    value:           '1'
  - key:             cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value:           '1'
  - key:             cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value:           '1'
  - key:             cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions
    value:           '1'

  # Line length
  - key:             readability-function-cognitive-complexity.Threshold
    value:           '50'

# Warning options
WarningsAsErrors: ''
FormatStyle:     file  # Use .clang-format file

# System headers - don't analyze system/standard library headers
SystemHeaders:   false
...
